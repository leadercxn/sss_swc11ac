/******************************************************************* 
 * Header file generated by Protoc for Embedded C.                 *
 * Version 0.2 (2012-01-31)                                        *
 *                                                                 *
 * Copyright (c) 2009-2012                                         *
 * Technische Universitaet Muenchen                                *
 * http://www4.in.tum.de/                                          *
 *                                                                 *
 * Source : LoRaMacFacCfg.proto
 * Package: 
 *                                                                 *
 * Do not edit.                                                    *
 *******************************************************************/
 
#ifndef _LoRaMacFacCfg_H
#define _LoRaMacFacCfg_H

#ifdef __cplusplus
  extern "C" {
#endif
      
#include "protoComm.h"

/*******************************************************************
 * Enumeration: LoRaMacFacCfg.proto, line 18
 *******************************************************************/
enum Activation {
  _ABP = 0,
  _OTAA = 1
};

/*******************************************************************
 * Enumeration: LoRaMacFacCfg.proto, line 23
 *******************************************************************/
enum ClassType {
  _A = 0,
  _B = 1,
  _C = 2,
  _G = 3
};

/*******************************************************************
 * Message: LoRaMacFacCfg.proto, line 1
 *******************************************************************/

/* Maximum size of a serialized DRRagne-message, useful for buffer allocation. */
#define MAX_DRRagne_SIZE 16

/* Structure that holds a deserialized DRRagne-message. */
struct DRRagne {
  uint8_t _drMin;
  uint8_t _drMax;
};
/*
 * Serialize a DRRagne-message into the given buffer at offset and return
 * new offset for optional next message.
 */
int DRRagne_write_delimited_to(struct DRRagne *_DRRagne, void *_buffer, int offset);

/*
 * Serialize a DRRagne-message together with its tag into the given buffer 
 * at offset and return new offset for optional next message.
 * Is useful if a DRRagne-message is embedded in another message.
 */
int DRRagne_write_with_tag(struct DRRagne *_DRRagne, void *_buffer, int offset, int tag);

/*
 * Deserialize a DRRagne-message from the given buffer at offset and return
 * new offset for optional next message.
 *
 * Note: All fields in _DRRagne will be reset to 0 before _buffer is interpreted.
 */
int DRRagne_read_delimited_from(void *_buffer, struct DRRagne *_DRRagne, int offset);


/*******************************************************************
 * Message: LoRaMacFacCfg.proto, line 6
 *******************************************************************/

/* Maximum size of a serialized Band-message, useful for buffer allocation. */
#define MAX_Band_SIZE 16

/* Structure that holds a deserialized Band-message. */
struct Band {
  uint16_t _dutyCycle;
  int8_t _maxTxPower;
};
/*
 * Serialize a Band-message into the given buffer at offset and return
 * new offset for optional next message.
 */
int Band_write_delimited_to(struct Band *_Band, void *_buffer, int offset);

/*
 * Serialize a Band-message together with its tag into the given buffer 
 * at offset and return new offset for optional next message.
 * Is useful if a Band-message is embedded in another message.
 */
int Band_write_with_tag(struct Band *_Band, void *_buffer, int offset, int tag);

/*
 * Deserialize a Band-message from the given buffer at offset and return
 * new offset for optional next message.
 *
 * Note: All fields in _Band will be reset to 0 before _buffer is interpreted.
 */
int Band_read_delimited_from(void *_buffer, struct Band *_Band, int offset);


/*******************************************************************
 * Message: LoRaMacFacCfg.proto, line 11
 *******************************************************************/

/* Maximum size of a serialized Channel-message, useful for buffer allocation. */
#define MAX_Channel_SIZE 26

/* Structure that holds a deserialized Channel-message. */
struct Channel {
  uint32_t _frequency;
  uint32_t _rx1Frequency;
  struct DRRagne _drRange;
  uint8_t _bandIndex;
};
/*
 * Serialize a Channel-message into the given buffer at offset and return
 * new offset for optional next message.
 */
int Channel_write_delimited_to(struct Channel *_Channel, void *_buffer, int offset);

/*
 * Serialize a Channel-message together with its tag into the given buffer 
 * at offset and return new offset for optional next message.
 * Is useful if a Channel-message is embedded in another message.
 */
int Channel_write_with_tag(struct Channel *_Channel, void *_buffer, int offset, int tag);

/*
 * Deserialize a Channel-message from the given buffer at offset and return
 * new offset for optional next message.
 *
 * Note: All fields in _Channel will be reset to 0 before _buffer is interpreted.
 */
int Channel_read_delimited_from(void *_buffer, struct Channel *_Channel, int offset);


/*******************************************************************
 * Message: LoRaMacFacCfg.proto, line 30
 *******************************************************************/

/* Maximum size of a serialized FacLoRaParam-message, useful for buffer allocation. */
#define MAX_FacLoRaParam_SIZE 852

/* Structure that holds a deserialized FacLoRaParam-message. */
struct FacLoRaParam {
  int _EUI_len;
  char _EUI[8];
  int _appEUI_len;
  char _appEUI[8];
  int _netId_len;
  char _netId[4];
  int _appKey_len;
  char _appKey[16];
  int _nwkSKey_len;
  char _nwkSKey[16];
  int _appSKey_len;
  char _appSKey[16];
  int _appNonce_len;
  char _appNonce[3];
  int _devNonce_len;
  char _devNonce[2];
  int _devAddr_len;
  char _devAddr[4];
  int _channels_repeated_len;
  struct Channel _channels[16];
  int _bands_repeated_len;
  struct Band _bands[10];
  char _adr;
  signed long _txPower;
  unsigned long _dataRate;
  unsigned long _nbTrans;
  int _channelMask_repeated_len;
  uint16_t _channelMask[7];
  unsigned long _maxDutyCycle;
  unsigned long _rx1DRoffset;
  unsigned long _rx2Frequency;
  unsigned long _rx2DataRate;
  unsigned long _delay;
  struct Channel _pingSlotChannel;
  char _classBEnabled;
  unsigned long _pingPeriodicity;
  unsigned long _pingDataRate;
  unsigned long _beaconFrequency;
  unsigned long _beaconDataRate;
  struct Channel _classGChannel;
  char _classGEnabled;
  unsigned long _classGPeriod;
  unsigned long _classGDataRate;
  uint8_t _activation;
  uint8_t _classType;
};
/*
 * Serialize a FacLoRaParam-message into the given buffer at offset and return
 * new offset for optional next message.
 */
int FacLoRaParam_write_delimited_to(struct FacLoRaParam *_FacLoRaParam, void *_buffer, int offset);

/*
 * Serialize a FacLoRaParam-message together with its tag into the given buffer 
 * at offset and return new offset for optional next message.
 * Is useful if a FacLoRaParam-message is embedded in another message.
 */
int FacLoRaParam_write_with_tag(struct FacLoRaParam *_FacLoRaParam, void *_buffer, int offset, int tag);

/*
 * Deserialize a FacLoRaParam-message from the given buffer at offset and return
 * new offset for optional next message.
 *
 * Note: All fields in _FacLoRaParam will be reset to 0 before _buffer is interpreted.
 */
//int FacLoRaParam_read_delimited_from(void *_buffer, struct FacLoRaParam *_FacLoRaParam, int offset);
int FacLoRaParam_read_delimited_from(void *_buffer, struct FacLoRaParam *_FacLoRaParam, unsigned long size, int offset);


#ifdef _cplusplus
  }
#endif

#endif
